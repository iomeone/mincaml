head	1.1;
access;
symbols;
locks
	sumii:1.1; strict;
comment	@; @;


1.1
date	2001.12.03.00.32.12;	author sumii;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@(* rename identifiers uniquely (alpha-conversion) *)

(* N.B. even ML's type system isn't perfect - cf. Pitts' type system *)

open KNormal

let genid (Syntax.I(x), t) = (Syntax.I(Fresh.gensym x), t)

let find env x = FinMap.find x env
(*
  try FinMap.find x env
  with FinMap.Undefined(_) ->
    (Format.eprintf "NOT alpha-converting free variable %s@@." (ppI x);
     x)
*)

let find' env = function
  | Ident(x) -> Ident(find env x)
  | SInt(i) -> SInt(i)

let rec f' env = function
  | Var(x) -> Var(find env x)
  | NegInt(x) -> NegInt(find' env x)
  | AddInt(x, y) -> AddInt(find env x, find' env y)
  | SubInt(x, y) -> SubInt(find env x, find' env y)
  | IfEqInt(x, y, e1, e2) -> IfEqInt(find env x, find' env y,
				     f' env e1, f' env e2)
  | IfLEInt(x, y, e1, e2) -> IfLEInt(find env x, find' env y,
				     f' env e1, f' env e2)
  | Tuple(xs) -> Tuple(List.map (find env) xs)
  | LetTuple(xs, y, e) ->
      let env' = FinMap.adds xs (List.map genid xs) env in
      LetTuple(List.map (find env') xs,
	       find env y, f' env' e)
  | Put(x, y, z, e) -> Put(find env x, find env y, find env z, f' env e)
  | Get(x, y) -> Get(find env x, find env y)
  | Let(x, e1, e2) ->
      let x' = genid x in
      Let(x', f' env e1, f' (FinMap.add x x' env) e2)
  | LetRec(fundefs, e) ->
      let xs = List.map (fun { name = x } -> x) fundefs in
      let env' = FinMap.adds xs (List.map genid xs) env in
      let fundefs' =
	List.map
	  (fun { name = x; args = ys; body = e } ->
	    let env'' = FinMap.adds ys (List.map genid ys) env in
	    { name = find env x;
	      args = List.map (find env'') ys;
	      body = f' env'' e })
	  fundefs in
      LetRec(fundefs', f' env' e)
  | App(x, ys) -> App(find env x,
		      List.map (find env) ys)
  | Int(i) -> Int(i)
  | Float(d) -> Float(d)

let f e =
  let xs = S.elements (fv e) in
  let env = FinMap.adds xs xs FinMap.empty in
  f' env e
@
