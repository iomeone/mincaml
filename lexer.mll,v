head	1.2;
access;
symbols;
locks
	sumii:1.2; strict;
comment	@# @;


1.2
date	2001.11.27.10.55.12;	author sumii;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.01.02.15.29;	author sumii;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@{
(* 補助的な変数、関数、型などの定義 *)
open Parser
}

(* 正規表現の略記 *)
let space = [' ' '\t' '\n' '\r']
let digit = ['0'-'9']
let lower = ['a'-'z']
let upper = ['A'-'Z']

rule token = parse
| space+
    { token lexbuf }
| "(*"
    { comment lexbuf; (* ネストしたコメントのためのトリック *)
      token lexbuf }
| "let"
    { LET }
| "rec"
    { REC }
| "and"
    { AND }
| '='
    { EQUAL }
| "in"
    { IN }
| digit+
    { INT(int_of_string (Lexing.lexeme lexbuf)) }
| digit+ ('.' digit*)? (['e' 'E'] ['+' '-']? digit+)?
    { FLOAT(float_of_string (Lexing.lexeme lexbuf)) }
| "-."
    { MINUS_DOT }
| '-'
    { MINUS }
| "+."
    { PLUS_DOT }
| '+'
    { PLUS }
| "*."
    { AST_DOT }
| '*'
    { AST }
| "/."
    { SLASH_DOT }
| '='
    { EQUAL }
| "<>"
    { LESS_GREATER }
| "<="
    { LESS_EQUAL }
| '<'
    { LESS }
| ">="
    { GREATER_EQUAL }
| '>'
    { GREATER }
| "if"
    { IF }
| "then"
    { THEN }
| "else"
    { ELSE }
| ','
    { COMMA }
| "Array.create"
    { ARRAY_CREATE }
| "."
    { DOT }
| "<-"
    { LEFT_ARROW }
| '('
    { LPAREN }
| ')'
    { RPAREN }
| lower (digit|lower|upper|'_')*
    { IDENT(Syntax.I(Lexing.lexeme lexbuf)) }
| '_'
    { IDENT(Syntax.I("_dummy")) }
| eof
    { EOF }
| _
    { failwith (Printf.sprintf "unknown token %s at characters %d-%d"
		  (Lexing.lexeme lexbuf)
		  (Lexing.lexeme_start lexbuf)
		  (Lexing.lexeme_end lexbuf)) }
and comment = parse
| "*)"
    { () }
| "(*"
    { comment lexbuf;
      comment lexbuf }
| eof
    { failwith "unterminated comment" }
| _
    { comment lexbuf }
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
| digit+ '.' digit* (['e' 'E'] ['+' '-']? digit+)?
d32 2
d36 14
d51 7
a57 1
    { LE }
d64 8
d78 2
d83 4
a86 1
    { failwith ("unknown token: " ^ Lexing.lexeme lexbuf) }
@
